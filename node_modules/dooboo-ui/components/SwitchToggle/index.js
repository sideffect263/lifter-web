import { Animated, TouchableOpacity } from 'react-native';
import React, { useEffect, useState } from 'react';
import styled from '@emotion/native';
import { useTheme } from '@dooboo-ui/theme';
// Typing limitation: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/12202
const AnimatedContainer = styled(Animated.View) `
  flex-direction: row;
  align-items: center;
`;
const defaultContainer = {
    width: 80,
    height: 40,
    borderRadius: 25,
    padding: 5,
};
const defaultCircle = {
    width: 32,
    height: 32,
    borderRadius: 16,
};
export function SwitchToggle(props) {
    const { testID, isOn, style, styles, duration = 300, onElement, offElement, onPress, } = props;
    const { theme } = useTheme();
    const { backgroundColorOn = theme.role.primary, backgroundColorOff = theme.bg.disabled, circleColorOn = theme.text.contrast, circleColorOff = theme.text.basic, container = defaultContainer, circle = defaultCircle, button, onElementContainer, offElementContainer, } = styles ?? {};
    const paddingLeft = container.padding || container.paddingLeft || 0;
    const paddingRight = container.padding || container.paddingRight || 0;
    const circlePosXStart = 0;
    const circlePosXEnd = (container.width ?? defaultContainer.width) -
        (circle.width ?? defaultCircle.width) -
        (paddingRight + paddingLeft);
    const [animXValue] = useState(new Animated.Value(isOn ? 1 : 0));
    useEffect(() => {
        const runAnimation = () => {
            const option = {
                fromValue: isOn ? 0 : 1,
                toValue: isOn ? 1 : 0,
                duration,
                useNativeDriver: false,
            };
            Animated.timing(animXValue, option).start();
        };
        runAnimation();
    }, [animXValue, isOn, duration]);
    const CircleButton = (<Animated.View style={[
            circle,
            {
                backgroundColor: animXValue.interpolate({
                    inputRange: [0.5, 1],
                    outputRange: [
                        circleColorOff,
                        circleColorOn,
                    ],
                }),
            },
            {
                transform: [
                    {
                        translateX: animXValue.interpolate({
                            inputRange: [0, 1],
                            outputRange: [
                                circlePosXStart,
                                circlePosXEnd,
                            ],
                        }),
                    },
                ],
            },
            button,
        ]}/>);
    const OnElement = (<Animated.View style={[{ opacity: animXValue }, onElementContainer]}>
      {onElement}
    </Animated.View>);
    const OffElement = (<Animated.View style={[
            {
                opacity: animXValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [1, 0],
                }),
            },
            offElementContainer,
        ]}>
      {offElement}
    </Animated.View>);
    return (<TouchableOpacity testID={testID} accessibilityRole="switch" style={style} onPress={onPress} activeOpacity={0.8}>
      <AnimatedContainer style={[
            container,
            {
                paddingLeft,
                paddingRight,
            },
            {
                backgroundColor: animXValue.interpolate({
                    inputRange: [0, 1],
                    outputRange: [
                        backgroundColorOff,
                        backgroundColorOn,
                    ],
                }),
            },
        ]}>
        {isOn ? OnElement : OffElement}
        {CircleButton}
      </AnimatedContainer>
    </TouchableOpacity>);
}
