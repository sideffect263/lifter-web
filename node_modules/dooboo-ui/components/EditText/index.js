import { Platform, Text, TextInput, View } from 'react-native';
import React, { useRef, useState } from 'react';
import { TouchableWithoutFeedback } from 'react-native-gesture-handler';
import { useHover } from 'react-native-web-hooks';
import { useTheme } from '@dooboo-ui/theme';
export const EditText = (props) => {
    const { testID, inputRef: givenInputRef, textInputProps, style, styles, label, error, multiline = false, value = '', placeholder, placeholderColor, onChange, onChangeText, onFocus, onBlur, onSubmitEditing, maxLength, autoCapitalize = 'none', secureTextEntry = false, editable = true, direction = 'column', decoration = 'underline', colors = {}, } = props;
    const { theme } = useTheme();
    const [focused, setFocused] = useState(false);
    const ref = useRef(null);
    const defaultInputRef = useRef(null);
    const inputRef = givenInputRef || defaultInputRef;
    const hovered = useHover(ref);
    const defaultContainerStyle = {
        flexDirection: direction,
    };
    const defaultColor = !editable
        ? colors.disabled || theme.text.disabled
        : error
            ? colors.error || theme.text.validation
            : focused
                ? colors.focused || theme.text.basic
                : hovered
                    ? colors.hovered || theme.text.basic
                    : colors.placeholder || theme.text.placeholder;
    // Default label placeholder color has different value compared to default input placeholder color
    const labelPlaceholderColor = defaultColor ===
        (colors.placeholder || theme.text.placeholder) && {
        color: colors.placeholder || theme.text.disabled,
    };
    const status = !editable
        ? 'disabled'
        : error
            ? 'error'
            : hovered
                ? 'hovered'
                : focused
                    ? 'focused'
                    : 'basic';
    const renderLabel = () => {
        return typeof label === 'string' ? (<Text style={[{ color: defaultColor }, labelPlaceholderColor, styles?.label]}>
        {label}
      </Text>) : label ? (label(status)) : null;
    };
    const renderContainer = (children) => {
        return (<TouchableWithoutFeedback testID="container-touch" onPress={() => inputRef.current?.focus()}>
        <View testID="container" style={[
                defaultContainerStyle,
                {
                    flexDirection: direction,
                    alignItems: direction === 'row' ? 'center' : 'flex-start',
                    // Default border color follows placeholder color for the label.
                    borderColor: labelPlaceholderColor
                        ? labelPlaceholderColor.color
                        : defaultColor,
                },
                decoration === 'boxed'
                    ? { borderWidth: 1, paddingHorizontal: 12, paddingTop: 8 }
                    : { borderBottomWidth: 1 },
                styles?.container,
            ]}>
          {children}
        </View>
      </TouchableWithoutFeedback>);
    };
    const renderInput = () => {
        return (<TextInput testID={testID} ref={inputRef} autoCapitalize={autoCapitalize} secureTextEntry={secureTextEntry} style={[
                // Stretch input in order to make remaining space clickable
                direction === 'row' ? { flex: 1 } : { alignSelf: 'stretch' },
                // @ts-ignore
                Platform.OS === 'web' && { outlineWidth: 0 },
                direction === 'column' ? { paddingTop: 12 } : { paddingLeft: 12 },
                { color: defaultColor, paddingVertical: 12 },
                styles?.input,
            ]} editable={editable} onFocus={(e) => {
                setFocused(true);
                onFocus?.(e);
            }} onBlur={(e) => {
                setFocused(false);
                onBlur?.(e);
            }} multiline={multiline} maxLength={maxLength} value={value} placeholder={placeholder} placeholderTextColor={placeholderColor || theme.text.placeholder} onChange={onChange} onChangeText={onChangeText} onSubmitEditing={onSubmitEditing} {...textInputProps}/>);
    };
    const renderError = () => {
        return error ? (typeof error === 'string' ? (<Text style={[
                { color: theme.text.validation },
                { marginTop: 8 },
                styles?.error,
            ]}>
          {error}
        </Text>) : (error?.(status))) : null;
    };
    const renderCounter = () => {
        return maxLength ? (<Text style={[
                {
                    position: 'absolute',
                    color: theme.text.placeholder,
                    alignSelf: 'flex-end',
                    fontSize: 12,
                    bottom: -24,
                },
                styles?.counter,
            ]}>{`${value.length}/${maxLength}`}</Text>) : null;
    };
    return (<View testID="edit-text" ref={Platform.select({ web: ref, default: undefined })} style={[{ alignSelf: 'stretch', flexDirection: 'column' }, style]}>
      {renderContainer(<>
          {renderLabel()}
          {renderInput()}
          {renderCounter()}
        </>)}
      {renderError()}
    </View>);
};
