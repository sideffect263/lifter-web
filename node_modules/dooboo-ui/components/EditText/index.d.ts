import type { FC, MutableRefObject, ReactElement, RefObject } from 'react';
import { TextInput } from 'react-native';
import type { StyleProp, TextInputProps, TextStyle, ViewStyle } from 'react-native';
type Styles = {
    container?: StyleProp<ViewStyle>;
    label?: StyleProp<TextStyle>;
    input?: StyleProp<TextStyle>;
    error?: StyleProp<TextStyle>;
    counter?: StyleProp<TextStyle>;
};
export type EditTextStatus = 'disabled' | 'error' | 'focused' | 'hovered' | 'basic';
type RenderType = (stats: EditTextStatus) => ReactElement;
export type EditTextProps = {
    testID?: TextInputProps['testID'];
    inputRef?: MutableRefObject<TextInput | undefined> | RefObject<TextInput>;
    style?: StyleProp<ViewStyle>;
    styles?: Styles;
    label?: string | RenderType;
    error?: string | RenderType;
    direction?: 'row' | 'column';
    decoration?: 'underline' | 'boxed';
    value?: TextInputProps['value'];
    multiline?: TextInputProps['multiline'];
    onChange?: TextInputProps['onChange'];
    onChangeText?: TextInputProps['onChangeText'];
    placeholder?: TextInputProps['placeholder'];
    placeholderColor?: TextInputProps['placeholderTextColor'];
    onFocus?: TextInputProps['onFocus'] | undefined;
    onBlur?: TextInputProps['onBlur'] | undefined;
    editable?: TextInputProps['editable'];
    autoCapitalize?: TextInputProps['autoCapitalize'];
    secureTextEntry?: TextInputProps['secureTextEntry'];
    onSubmitEditing?: TextInputProps['onSubmitEditing'];
    maxLength?: TextInputProps['maxLength'];
    textInputProps?: Omit<TextInputProps, 'value' | 'onChange' | 'multiline' | 'onChange' | 'onChangeText' | 'placeholder' | 'placeholderTextColor' | 'onFocus' | 'onBlur' | 'editable' | 'autoCapitalize' | 'secureTextEntry' | 'onSubmitEditing' | 'maxLength'>;
    colors?: {
        basic?: string;
        disabled?: string;
        error?: string;
        focused?: string;
        hovered?: string;
        placeholder?: string;
    };
};
export declare const EditText: FC<EditTextProps>;
export {};
