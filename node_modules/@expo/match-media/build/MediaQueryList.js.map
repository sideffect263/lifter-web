{"version":3,"file":"MediaQueryList.js","sourceRoot":"","sources":["../src/MediaQueryList.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,oEAAwC;AAExC,2EAA6D;AAC7D,+CAA0C;AAI1C;;;GAGG;AACH,MAAqB,cAAc,CAAC,4BAA4B;IAQ1C;IAPZ,SAAS,GAAe,EAAE,CAAC;IAE3B,WAAW,GACjB,iBAAiB,CAAC,WAAW,CAAC,WAAW,CAAC;IAEpC,WAAW,CAAe;IAElC,YAAoB,KAAa;QAAb,UAAK,GAAL,KAAK,CAAQ;QAC/B,CAAC,KAAK,IAAI,EAAE;YACV,IAAI;gBACF,MAAM,WAAW,GAAG,MAAM,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;gBAClE,IAAI,CAAC,eAAe,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;aACvC;YAAC,MAAM,GAAE;QACZ,CAAC,CAAC,EAAE,CAAC;QAEL,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC,4BAA4B,CAC/D,CAAC,EAAE,eAAe,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,EAAE;YACvC,IAAI,CAAC,eAAe,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QACxC,CAAC,CACF,CAAC;QAEF,yBAAU,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACrD,CAAC;IAEO,MAAM,GAAG,GAAG,EAAE;QACpB,IAAI,CAAC,eAAe,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAC1D,CAAC,CAAC;IAEF,mDAAmD;IACnD,QAAQ;QACN,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC;SAC3B;QACD,yBAAU,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACxD,CAAC;IAEM,WAAW,CAAC,QAAkB;QACnC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAChC,CAAC;IAEM,cAAc,CAAC,QAAkB;QACtC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC/C,IAAI,KAAK,KAAK,CAAC,CAAC;YAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACpD,CAAC;IAED,IAAW,OAAO;QAChB,MAAM,gBAAgB,GAAG,yBAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAClD,OAAO,wBAAU,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE;YAClC,IAAI,EAAE,QAAQ;YACd,WAAW,EACT,IAAI,CAAC,WAAW,KAAK,iBAAiB,CAAC,WAAW,CAAC,cAAc;gBACjE,IAAI,CAAC,WAAW,KAAK,iBAAiB,CAAC,WAAW,CAAC,eAAe;gBAChE,CAAC,CAAC,WAAW;gBACb,CAAC,CAAC,UAAU;YAChB,GAAG,gBAAgB;YACnB,cAAc,EAAE,gBAAgB,CAAC,KAAK;YACtC,eAAe,EAAE,gBAAgB,CAAC,MAAM;SACzC,CAAC,CAAC;IACL,CAAC;IAEO,eAAe,CAAC,EAAE,WAAW,EAAE;QACrC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YAClC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACjB,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAnED,iCAmEC","sourcesContent":["import mediaQuery from \"css-mediaquery\";\nimport type { Subscription } from \"expo-modules-core\";\nimport * as ScreenOrientation from \"expo-screen-orientation\";\nimport { Dimensions } from \"react-native\";\n\ntype Listener = (context: MediaQueryList) => any;\n\n/**\n * A pseudo implementation of MediaQueryList\n * https://www.w3.org/TR/css3-mediaqueries/\n */\nexport default class MediaQueryList /* extends MediaQueryList */ {\n  private listeners: Listener[] = [];\n\n  private orientation: ScreenOrientation.Orientation =\n    ScreenOrientation.Orientation.PORTRAIT_UP;\n\n  private unsubscribe: Subscription;\n\n  constructor(private query: string) {\n    (async () => {\n      try {\n        const orientation = await ScreenOrientation.getOrientationAsync();\n        this.updateListeners({ orientation });\n      } catch {}\n    })();\n\n    this.unsubscribe = ScreenOrientation.addOrientationChangeListener(\n      ({ orientationInfo: { orientation } }) => {\n        this.updateListeners({ orientation });\n      }\n    );\n\n    Dimensions.addEventListener(\"change\", this.resize);\n  }\n\n  private resize = () => {\n    this.updateListeners({ orientation: this.orientation });\n  };\n\n  // TODO: find an automatic interface for unmounting\n  _unmount() {\n    if (this.unsubscribe) {\n      this.unsubscribe.remove();\n    }\n    Dimensions.removeEventListener(\"change\", this.resize);\n  }\n\n  public addListener(listener: Listener) {\n    this.listeners.push(listener);\n  }\n\n  public removeListener(listener: Listener) {\n    const index = this.listeners.indexOf(listener);\n    if (index !== -1) this.listeners.splice(index, 1);\n  }\n\n  public get matches(): boolean {\n    const windowDimensions = Dimensions.get(\"window\");\n    return mediaQuery.match(this.query, {\n      type: \"screen\",\n      orientation:\n        this.orientation === ScreenOrientation.Orientation.LANDSCAPE_LEFT ||\n        this.orientation === ScreenOrientation.Orientation.LANDSCAPE_RIGHT\n          ? \"landscape\"\n          : \"portrait\",\n      ...windowDimensions,\n      \"device-width\": windowDimensions.width,\n      \"device-height\": windowDimensions.height,\n    });\n  }\n\n  private updateListeners({ orientation }) {\n    this.orientation = orientation;\n    this.listeners.forEach((listener) => {\n      listener(this);\n    });\n  }\n}\n"]}