import { jsx as _jsx } from "react/jsx-runtime";
import '@expo/match-media';
import { ThemeProvider as EmotionThemeProvider, withTheme } from '@emotion/react';
import { colors, dark, light } from './colors';
import { useEffect, useState } from 'react';
import createDoobooContext from './createDoobooContext';
import useColorScheme from './useColorScheme';
import { useMediaQuery } from 'react-responsive';
const [useCtx, DoobooProvider] = createDoobooContext();
const genTheme = (type, themeParam) => {
    const theme = type === 'light' ? light : dark;
    return {
        ...themeParam?.[type],
        bg: {
            ...theme.bg,
            ...(themeParam?.[type]?.bg || {}),
        },
        role: {
            ...theme.role,
            ...(themeParam?.[type]?.role || {}),
        },
        text: {
            ...theme.text,
            ...(themeParam?.[type]?.text || {}),
        },
        button: {
            ...theme.button,
            primary: {
                ...theme.button.primary,
                ...(themeParam?.[type]?.button?.primary || {}),
            },
            secondary: {
                ...theme.button.secondary,
                ...(themeParam?.[type]?.button?.secondary || {}),
            },
            success: {
                ...theme.button.success,
                ...(themeParam?.[type]?.button?.success || {}),
            },
            warning: {
                ...theme.button.warning,
                ...(themeParam?.[type]?.button?.warning || {}),
            },
            danger: {
                ...theme.button.danger,
                ...(themeParam?.[type]?.button?.danger || {}),
            },
            info: {
                ...theme.button.info,
                ...(themeParam?.[type]?.button?.info || {}),
            },
            light: {
                ...theme.button.light,
                ...(themeParam?.[type]?.button?.light || {}),
            },
            disabled: {
                ...theme.button.disabled,
                ...(themeParam?.[type]?.button?.disabled || {}),
            },
        },
    };
};
export function ThemeProvider({ children, initialThemeType, customTheme = {}, }) {
    const isPortrait = useMediaQuery({ orientation: 'portrait' });
    const isMobile = useMediaQuery({ maxWidth: 767 });
    const isTablet = useMediaQuery({ minWidth: 767, maxWidth: 992 });
    const isDesktop = useMediaQuery({ minWidth: 992 });
    const colorScheme = useColorScheme();
    const [themeType, setThemeType] = useState(initialThemeType ?? colorScheme);
    useEffect(() => {
        if (!initialThemeType) {
            setThemeType(colorScheme);
        }
    }, [colorScheme, initialThemeType]);
    const changeThemeType = (themeTypeProp) => {
        if (!themeTypeProp) {
            setThemeType(themeType === 'light' ? 'dark' : 'light');
            return;
        }
        setThemeType(themeTypeProp);
    };
    const theme = {
        light: genTheme('light', customTheme),
        dark: genTheme('dark', customTheme),
    }[themeType ?? 'light'];
    const media = {
        isPortrait,
        isMobile,
        isTablet,
        isDesktop,
    };
    return (_jsx(DoobooProvider, { value: {
            media,
            themeType,
            changeThemeType,
            theme,
            colors,
        }, children: _jsx(EmotionThemeProvider, { theme: { ...theme, ...media }, children: children }) }));
}
export { useCtx as useTheme, withTheme };
